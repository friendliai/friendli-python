name: CodeBoarding Documentation update workflow

on:
  schedule:
    - cron: '0 20 * * 6'  # Every Saturday at 8:00 PM UTC
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'Repository URL to test with'
        required: false
        default: 'https://github.com/friendliai/friendli-python'
        type: string
      source_branch:
        description: 'Source branch for generation'
        required: false
        default: 'main'
        type: string
      target_branch:
        description: 'Target branch for pull request'
        required: false
        default: 'main'
        type: string
      output_format:
        description: 'Output format for documentation'
        required: false
        default: '.md'
        type: choice
        options:
          - '.mdx'
          - '.md'
          - '.rst'
      output_directory:
        description: 'Output directory for documentation files'
        required: false
        default: '.codeboarding'
        type: string

jobs:
  update-docs-action-usage:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Required to access branch history

      # Determine branches based on context
      - name: Set branch variables
        id: set-branches
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.source_branch }}" != "" ] && [ "${{ github.event.inputs.target_branch }}" != "" ]; then
            echo "source_branch=${{ github.event.inputs.source_branch }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT
          else
            echo "source_branch=main" >> $GITHUB_OUTPUT
            echo "target_branch=main" >> $GITHUB_OUTPUT
          fi

      - name: Fetch CodeBoarding Documentation
        timeout-minutes: 30
        id: codeboarding
        uses: CodeBoarding/CodeBoarding-GHAction@0.1.2
        with:
          repository_url: ${{ github.event.inputs.repository_url }}
          source_branch: ${{ steps.set-branches.outputs.source_branch }}
          target_branch: ${{ steps.set-branches.outputs.target_branch }}
          output_directory: ${{ github.event.inputs.output_directory || '.codeboarding' }}
          output_format: ${{ github.event.inputs.output_format || '.md' }}

      - name: Display Action Results
        run: |
          echo "Documentation files created: ${{ steps.codeboarding.outputs.markdown_files_created }}"
          echo "JSON files created: ${{ steps.codeboarding.outputs.json_files_created }}"
          echo "Documentation directory: ${{ steps.codeboarding.outputs.output_directory }}"
          echo "JSON directory: ${{ steps.codeboarding.outputs.json_directory }}"
          echo "Has changes: ${{ steps.codeboarding.outputs.has_changes }}"

      # Check if we have any changes to commit
      - name: Check for changes
        id: git-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_git_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_git_changes=false" >> $GITHUB_OUTPUT
          fi

      # Create docs/architecture directory and copy CodeBoarding files
      - name: Copy CodeBoarding documentation to architecture folder
        if: steps.git-changes.outputs.has_git_changes == 'true' && steps.codeboarding.outputs.has_changes == 'true'
        run: |
          # Create docs/architecture directory if it doesn't exist
          mkdir -p docs/architecture
          
          # Create on_boarding.md if it doesn't exist
          if [ ! -f "docs/architecture/on_boarding.md" ]; then
            cat > docs/architecture/on_boarding.md << 'EOF'
          # Friendli Python SDK - Architecture & Onboarding
          
          This section contains automatically generated documentation to help developers understand the codebase architecture and onboarding process.
          
          ## Generated Documentation
          
          The following documentation files are automatically generated by CodeBoarding to provide insights into the codebase:
          
          EOF
          fi
          
          # Log the files found in the CodeBoarding directory
          echo "📁 Scanning CodeBoarding directory for .md files..."
          ls -la .codeboarding/ || echo "⚠️  CodeBoarding directory not found"
          
          # Copy all .md files from CodeBoarding to docs/architecture
          copied_files_count=0
          
          for file in .codeboarding/*.md; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "✅ Copying: $filename to docs/architecture/"
              cp "$file" "docs/architecture/$filename"
              copied_files_count=$((copied_files_count + 1))
              
              # Add reference to on_boarding.md
              echo "- [$filename](./$filename)" >> docs/architecture/on_boarding.md
            fi
          done
          
          # Add timestamp to on_boarding.md
          echo "" >> docs/architecture/on_boarding.md
          echo "_Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> docs/architecture/on_boarding.md
          
          # Summary logging
          echo ""
          echo "📊 File copy summary:"
          echo "   - Total .md files copied: $copied_files_count"
          echo "   - Destination: docs/architecture/"
          
          # List final contents
          if [ $copied_files_count -gt 0 ]; then
            echo "   - Files in destination:"
            ls -la docs/architecture/*.md 2>/dev/null || echo "     No .md files found in destination"
          fi
          
          echo "CodeBoarding documentation copied to docs/architecture/"

      - name: Commit and push changes
        if: steps.git-changes.outputs.has_git_changes == 'true' && steps.codeboarding.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "docs: update codeboarding architecture documentation

          ## 📚 Architecture Documentation Update
          This commit contains updated documentation files fetched from the CodeBoarding service and copied to the architecture documentation section.
          
          ### 📊 Summary
          - Documentation files created/updated: ${{ steps.codeboarding.outputs.markdown_files_created }}
          - JSON files created/updated: ${{ steps.codeboarding.outputs.json_files_created }}
          - Documentation directory: ${{ steps.codeboarding.outputs.output_directory }}/
          - JSON directory: ${{ steps.codeboarding.outputs.json_directory }}/
          - Output format: ${{ github.event.inputs.output_format || '.md' }}
          - Repository analyzed: ${{ github.server_url }}/${{ github.repository }}
          - Destination: docs/architecture/
          
          The generated .md files have been automatically copied to the architecture documentation section and referenced in on_boarding.md.
          
          🤖 This commit was automatically generated by the CodeBoarding documentation update workflow."
          git push

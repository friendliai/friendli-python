{
  "description": "Offers an extensible mechanism for injecting custom logic at various stages of the request/response lifecycle, allowing for pre-processing, post-processing, and error handling customization.",
  "components": [
    {
      "name": "Hook Contexts (DTOs)",
      "description": "A set of specialized Data Transfer Objects (DTOs) that encapsulate and pass relevant data and state through different stages of the API request/response lifecycle. These contexts provide the necessary information for hooks to operate on.",
      "referenced_source_code": [
        {
          "qualified_name": "friendli_core._hooks.types.HookContext",
          "reference_file": "/mnt/e/StartUp/friendli-python/src/friendli_core/_hooks/types.py",
          "reference_start_line": 11,
          "reference_end_line": 30
        },
        {
          "qualified_name": "friendli_core._hooks.types.BeforeRequestContext",
          "reference_file": "/mnt/e/StartUp/friendli-python/src/friendli_core/_hooks/types.py",
          "reference_start_line": 33,
          "reference_end_line": 41
        },
        {
          "qualified_name": "friendli_core._hooks.types.AfterSuccessContext",
          "reference_file": "/mnt/e/StartUp/friendli-python/src/friendli_core/_hooks/types.py",
          "reference_start_line": 44,
          "reference_end_line": 52
        },
        {
          "qualified_name": "friendli_core._hooks.types.AfterErrorContext",
          "reference_file": "/mnt/e/StartUp/friendli-python/src/friendli_core/_hooks/types.py",
          "reference_start_line": 55,
          "reference_end_line": 63
        }
      ],
      "can_expand": false
    },
    {
      "name": "Hook Interface",
      "description": "Defines the abstract interface or base class that custom hooks must implement. It establishes the contract for various hook methods (e.g., `before_request`, `after_success`, `after_error`), ensuring a consistent extensibility point for SDK users.",
      "referenced_source_code": [
        {
          "qualified_name": "friendli_core._hooks.types.Hooks",
          "reference_file": "/mnt/e/StartUp/friendli-python/src/friendli_core/_hooks/types.py",
          "reference_start_line": 99,
          "reference_end_line": 114
        }
      ],
      "can_expand": false
    },
    {
      "name": "SDK Hooks Orchestrator",
      "description": "The central manager responsible for registering, storing, and orchestrating the execution of various custom hooks at the appropriate stages of the SDK's request/response lifecycle. It acts as a facade for the entire hooks mechanism.",
      "referenced_source_code": [
        {
          "qualified_name": "friendli_core._hooks.sdkhooks.SDKHooks",
          "reference_file": "/mnt/e/StartUp/friendli-python/src/friendli_core/_hooks/sdkhooks.py",
          "reference_start_line": 21,
          "reference_end_line": 78
        }
      ],
      "can_expand": true
    }
  ],
  "components_relations": [
    {
      "relation": "provides data to",
      "src_name": "Hook Contexts (DTOs)",
      "dst_name": "Hook Interface"
    },
    {
      "relation": "interacts with",
      "src_name": "SDK Hooks Orchestrator",
      "dst_name": "Hook Contexts (DTOs)"
    },
    {
      "relation": "orchestrates",
      "src_name": "SDK Hooks Orchestrator",
      "dst_name": "Hook Interface"
    },
    {
      "relation": "receives",
      "src_name": "Hook Interface",
      "dst_name": "Hook Contexts (DTOs)"
    }
  ]
}
